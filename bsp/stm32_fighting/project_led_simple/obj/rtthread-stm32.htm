<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\rtthread-stm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\rtthread-stm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Wed May 07 07:36:52 2014
<BR><P>
<H3>Maximum Stack Usage =        356 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[28c81d8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[28c7e54]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28c7e54]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[280efd8]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15df698]">rt_kprintf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28c8034]">Reset_Handler</a>
 <LI><a href="#[15e1ee8]">NMI_Handler</a>
 <LI><a href="#[28c80ac]">rt_hw_hard_fault</a>
 <LI><a href="#[15e1f24]">MemManage_Handler</a>
 <LI><a href="#[15e1fd8]">BusFault_Handler</a>
 <LI><a href="#[15e1e70]">UsageFault_Handler</a>
 <LI><a href="#[15e1eac]">SVC_Handler</a>
 <LI><a href="#[15e1f9c]">DebugMon_Handler</a>
 <LI><a href="#[28c8070]">rt_hw_pend_sv</a>
 <LI><a href="#[15e02c8]">rt_hw_timer_handler</a>
 <LI><a href="#[28c6ea0]">WWDG_IRQHandler</a>
 <LI><a href="#[28c75a8]">PVD_IRQHandler</a>
 <LI><a href="#[28c73c8]">TAMPER_IRQHandler</a>
 <LI><a href="#[28c74f4]">RTC_IRQHandler</a>
 <LI><a href="#[28c7788]">FLASH_IRQHandler</a>
 <LI><a href="#[28c756c]">RCC_IRQHandler</a>
 <LI><a href="#[28c792c]">EXTI0_IRQHandler</a>
 <LI><a href="#[28c78b4]">EXTI1_IRQHandler</a>
 <LI><a href="#[28c7878]">EXTI2_IRQHandler</a>
 <LI><a href="#[28c783c]">EXTI3_IRQHandler</a>
 <LI><a href="#[28c7800]">EXTI4_IRQHandler</a>
 <LI><a href="#[28c7c74]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[28c7c38]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[28c7bfc]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[28c7bc0]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[28c7b84]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[28c7b48]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[28c7b0c]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[28c7e54]">ADC1_2_IRQHandler</a>
 <LI><a href="#[28c6f18]">USB_HP_CAN1_TX_IRQHandler</a>
 <LI><a href="#[28c6edc]">USB_LP_CAN1_RX0_IRQHandler</a>
 <LI><a href="#[28c7ddc]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[28c7da0]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[28c77c4]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[28c738c]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[28c72d8]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[28c7314]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[28c7350]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[28c729c]">TIM2_IRQHandler</a>
 <LI><a href="#[28c7260]">TIM3_IRQHandler</a>
 <LI><a href="#[28c7224]">TIM4_IRQHandler</a>
 <LI><a href="#[28c76d4]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[28c7710]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[28c765c]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[28c7698]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[28c747c]">SPI1_IRQHandler</a>
 <LI><a href="#[28c7440]">SPI2_IRQHandler</a>
 <LI><a href="#[28c6fcc]">USART1_IRQHandler</a>
 <LI><a href="#[28c6f90]">USART2_IRQHandler</a>
 <LI><a href="#[28c6f54]">USART3_IRQHandler</a>
 <LI><a href="#[28c78f0]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[28c7530]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[28c75e4]">OTG_FS_WKUP_IRQHandler</a>
 <LI><a href="#[28c7134]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[28c7080]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[28c70bc]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[28c70f8]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[28c7e18]">ADC3_IRQHandler</a>
 <LI><a href="#[28c774c]">FSMC_IRQHandler</a>
 <LI><a href="#[28c74b8]">SDIO_IRQHandler</a>
 <LI><a href="#[28c71e8]">TIM5_IRQHandler</a>
 <LI><a href="#[28c7404]">SPI3_IRQHandler</a>
 <LI><a href="#[28c7044]">UART4_IRQHandler</a>
 <LI><a href="#[28c7008]">UART5_IRQHandler</a>
 <LI><a href="#[28c71ac]">TIM6_IRQHandler</a>
 <LI><a href="#[28c7170]">TIM7_IRQHandler</a>
 <LI><a href="#[28c7ad0]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[28c7a94]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[28c7a58]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[28c7a1c]">DMA2_Channel4_5_IRQHandler</a>
 <LI><a href="#[28c79e0]">DMA2_Channel5_IRQHandler</a>
 <LI><a href="#[28c79a4]">ETH_IRQHandler</a>
 <LI><a href="#[28c7968]">ETH_WKUP_IRQHandler</a>
 <LI><a href="#[28c7cb0]">CAN2_TX_IRQHandler</a>
 <LI><a href="#[28c7d64]">CAN2_RX0_IRQHandler</a>
 <LI><a href="#[28c7d28]">CAN2_RX1_IRQHandler</a>
 <LI><a href="#[28c7cec]">CAN2_SCE_IRQHandler</a>
 <LI><a href="#[28c7620]">OTG_FS_IRQHandler</a>
 <LI><a href="#[28c6810]">__main</a>
 <LI><a href="#[28c297c]">__I$use$semihosting</a>
 <LI><a href="#[28028dc]">rt_thread_exit</a>
 <LI><a href="#[28025d0]">rt_thread_timeout</a>
 <LI><a href="#[15dfad0]">rt_thread_entry_led1</a>
 <LI><a href="#[15df788]">rt_thread_entry_led2</a>
 <LI><a href="#[28c8a48]">rt_serial_init</a>
 <LI><a href="#[28c8a0c]">rt_serial_open</a>
 <LI><a href="#[28c8afc]">rt_serial_close</a>
 <LI><a href="#[28c89d0]">rt_serial_read</a>
 <LI><a href="#[28c8994]">rt_serial_write</a>
 <LI><a href="#[28c8ac0]">rt_serial_control</a>
 <LI><a href="#[280e7a4]">rt_thread_idle_entry</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28c6810]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[28c0438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[28c66e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[28c0438]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[28c6810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28c03fc]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c66e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[28c03c0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[28c0384]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[28c01e0]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c01e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c01e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[28c00f0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[28c58d4]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28c6234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[28c3da4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[28c3e1c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[28c41dc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[28c4074]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[28c3cb4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[28c3d2c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[28c40ec]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[28c3ffc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[28c45d8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[28c4434]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[28c43bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[28c4344]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[28c42cc]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[28c4254]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[28c44e8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[28c3c78]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[28c4164]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[28c3f84]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[28c4560]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[28c2cc4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28c34f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[28c2058]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[28c1e78]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[28c1e3c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[28c1fa4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[28c210c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[28c1f2c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[28c66e4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28c03fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[28c6810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[28c62e8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[28c5f64]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28c5e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28c6234]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[28c58d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[28c6270]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[28c6180]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15def90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28c5cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[28c61bc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[28c5154]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28c5cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[28c34f8]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[28c2cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[28c3534]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[28c34bc]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28c31b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[28c8034]"></a>Reset_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7e54]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28c7e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28c7e54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7e18]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7ddc]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7da0]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7d64]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7d28]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7cec]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7cb0]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7c74]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7c38]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7bfc]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7bc0]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7b84]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7b48]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7b0c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7ad0]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7a94]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7a58]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7a1c]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c79e0]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c79a4]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7968]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c792c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c78f0]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c78b4]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7878]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c783c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7800]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c77c4]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7788]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c774c]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7710]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c76d4]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7698]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c765c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7620]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c75e4]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c75a8]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c756c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7530]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c74f4]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c74b8]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c747c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7440]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7404]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c73c8]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c738c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7350]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7314]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c72d8]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c729c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7260]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7224]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c71e8]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c71ac]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7170]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7134]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c70f8]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c70bc]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7080]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7044]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c7008]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6fcc]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6f90]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6f54]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6f18]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6edc]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6ea0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, start_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c81d8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, start_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c5e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15deedc]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15def90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15e00e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[15e0124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[280440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2804448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[28047cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[280eee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[280ef60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[280ef9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2810928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[28c89d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[280a76c]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e00e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[15e0124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[280440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2804448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[280eee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[280ef60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[280ef9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2810928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[28c89d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[2804394]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2804358]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[28c8070]"></a>rt_hw_pend_sv</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[280431c]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15dedec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[28c6d38]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[28c80ac]"></a>rt_hw_hard_fault</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fault_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_hw_hard_fault &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28c9dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[28c6978]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[28c693c]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[28c6900]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[28c5e38]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[28c5244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[28c81d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[28c5f64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28c5cd0]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28c5154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[28c5280]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[28c5244]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c5e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[28c5208]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[28c31b0]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c34bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[28c297c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[28c2940]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15e1fd8]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[2728c58]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28c8a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_enable_dma
</UL>

<P><STRONG><a name="[15e1f9c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15de6e4]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15dddc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[15df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
</UL>

<P><STRONG><a name="[15de6a8]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[15df710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_off
</UL>

<P><STRONG><a name="[15de66c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[15df6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_on
</UL>

<P><STRONG><a name="[15e1f24]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15e1ee8]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15e037c]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[15e0250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[15e028c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15dd898]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15ddd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[15e028c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[15e0250]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[15e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[15de630]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[15ddd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[15df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
</UL>

<P><STRONG><a name="[15e0214]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15dd7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[15e1eac]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15e01d8]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[15e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[15e0340]"></a>SysTick_Configuration</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, board.o(i.SysTick_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SysTick_Configuration &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15e01d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[15e0214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15def18]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15dcbb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[15def90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15dd85c]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[27ead04]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[28c8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[28c8ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
</UL>

<P><STRONG><a name="[15dd820]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15dd7e4]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15e0214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15e1e70]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15def90]"></a>main</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15def18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[28c6180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15df7c4]"></a>rt_application_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, application.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_application_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15e019c]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280f140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[280f1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[280f26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[280f26c]"></a>rt_device_close</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_close &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[280f1f4]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280ee34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[280ef60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[280ef9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[2810964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[15e019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[280f140]"></a>rt_device_open</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[280f0c8]"></a>rt_device_register</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_register &rArr; rt_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15dd7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
</UL>

<P><STRONG><a name="[280efd8]"></a>rt_device_write</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = rt_device_write &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280ee70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[280ef9c]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[280f1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[280ef60]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[280f1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[15e0304]"></a>rt_hw_board_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = rt_hw_board_init &rArr; rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[15e019c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[15e0340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[15e037c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2807aa8]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[28c9dbc]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fault.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c80ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault
</UL>

<P><STRONG><a name="[15df74c]"></a>rt_hw_led_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(i.rt_hw_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_hw_led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15de630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15de6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15dfad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led1
</UL>

<P><STRONG><a name="[15df710]"></a>rt_hw_led_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.rt_hw_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[15de6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15df788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led2
<LI><a href="#[15dfad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led1
</UL>

<P><STRONG><a name="[15df6d4]"></a>rt_hw_led_on</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.rt_hw_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_hw_led_on
</UL>
<BR>[Calls]<UL><LI><a href="#[15de66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[15df788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led2
<LI><a href="#[15dfad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led1
</UL>

<P><STRONG><a name="[15dd7a8]"></a>rt_hw_serial_register</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_hw_serial_register &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280f0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[2802594]"></a>rt_hw_stack_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stack.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2802954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[15e02c8]"></a>rt_hw_timer_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.rt_hw_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_hw_timer_handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15e00ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[15e00e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[15e0124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> start_rvds.o(RESET)
</UL>
<P><STRONG><a name="[15e0160]"></a>rt_hw_usart_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15dd7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[15dd7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[15dd820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[15dd85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[15ddd48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[15ddd84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[15dddc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[15dddfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[15e0124]"></a>rt_interrupt_enter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15e02c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_timer_handler
</UL>

<P><STRONG><a name="[15e00e8]"></a>rt_interrupt_leave</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15e02c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_timer_handler
</UL>

<P><STRONG><a name="[15df698]"></a>rt_kprintf</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2807aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[2807ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[280efd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15dd7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[15deea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[15df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[15df788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led2
<LI><a href="#[15dfad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led1
<LI><a href="#[280251c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[28025d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2802954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[280440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2804448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[28047cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2805870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2806a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_init
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[280eee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[280efd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[280f140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[280f26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[28c8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[28c8a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_enable_dma
<LI><a href="#[28c8ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[28c9dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[2807cc4]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2802954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[28c8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
</UL>

<P><STRONG><a name="[2806ba8]"></a>rt_mp_alloc</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mempool.o(i.rt_mp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_mp_alloc &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2810964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[2806a7c]"></a>rt_mp_init</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, mempool.o(i.rt_mp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_mp_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28c8a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
</UL>

<P><STRONG><a name="[280eee8]"></a>rt_object_detach</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_object_detach &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[280eeac]"></a>rt_object_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[280251c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2806a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_init
<LI><a href="#[280f0c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>

<P><STRONG><a name="[2805870]"></a>rt_object_is_systemobject</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_object_is_systemobject &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[280a640]"></a>rt_schedule</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2804358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2804394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[28047cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[28025d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[280ef60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[2810928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[2804448]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[28025d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[280440c]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
</UL>

<P><STRONG><a name="[280ee70]"></a>rt_set_errno</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2810964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[280efd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[28c89d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[15deea0]"></a>rt_show_version</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2807b98]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[2807ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[280ee34]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[280f1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[15dee64]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(i.rt_system_object_init))
<BR><BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15dee28]"></a>rt_system_scheduler_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15dedec]"></a>rt_system_scheduler_start</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[280431c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15dedb0]"></a>rt_system_tick_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clock.o(i.rt_system_tick_init))
<BR><BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15ded74]"></a>rt_system_timer_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28caa64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15df65c]"></a>rt_thread_delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(i.rt_thread_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[15df788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led2
<LI><a href="#[15dfad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_entry_led1
</UL>

<P><STRONG><a name="[15df788]"></a>rt_thread_entry_led2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, application.o(i.rt_thread_entry_led2))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_entry_led2 &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15df6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_on
<LI><a href="#[15df710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[15ded38]"></a>rt_thread_idle_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[15df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15def54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[15df620]"></a>rt_thread_init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2802954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15ded38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[15df7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[280a5c8]"></a>rt_thread_resume</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_thread_resume &rArr; rt_schedule_insert_thread &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2802918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2804448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15df5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>

<P><STRONG><a name="[2810964]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[15e00ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[280ee70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[280f1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[280260c]"></a>rt_thread_sleep</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, thread.o(i.rt_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[280a58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15df65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[15df5e4]"></a>rt_thread_startup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_thread_startup &rArr; rt_thread_resume &rArr; rt_schedule_insert_thread &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[15ded38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[15df7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[280a58c]"></a>rt_thread_suspend</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_thread_suspend &rArr; rt_schedule_remove_thread &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
</UL>

<P><STRONG><a name="[28025d0]"></a>rt_thread_timeout</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2802918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2804448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[2810928]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2802918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15e00ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[28109a0]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[15e00ac]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[2810928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[2810964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[15e02c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_timer_handler
</UL>

<P><STRONG><a name="[28108ec]"></a>rt_timer_check</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[28109a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[28ca9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[15e00ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[280a550]"></a>rt_timer_control</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_timer_control &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
</UL>

<P><STRONG><a name="[2802558]"></a>rt_timer_detach</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280eee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[28ca9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[28028dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[280251c]"></a>rt_timer_init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280eeac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[28caaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2802954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[280a514]"></a>rt_timer_start</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = rt_timer_start &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[28109a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[28caa28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[280260c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[15def54]"></a>rtthread_startup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = rtthread_startup &rArr; rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15ded38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[15ded74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[15dedb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[15dedec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[15dee28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[15dee64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[15deea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[15df7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[15e0304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15def90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15dfad0]"></a>rt_thread_entry_led1</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, application.o(i.rt_thread_entry_led1))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = rt_thread_entry_led1 &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[15df6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_on
<LI><a href="#[15df710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_off
<LI><a href="#[15df74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[15dddfc]"></a>DMA_Configuration</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(i.DMA_Configuration))
<BR><BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15dddc0]"></a>GPIO_Configuration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15de6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15ddd84]"></a>NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15dd898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15ddd48]"></a>RCC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[15de630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15e0160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[15dcbb4]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15dcb78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[15def18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[15dcb78]"></a>SetSysClockTo72</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Called By]<UL><LI><a href="#[15dcbb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[280e7a4]"></a>rt_thread_idle_entry</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_thread_idle_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[2807f1c]"></a>print_number</STRONG> (Thumb, 304 bytes, Stack size 52 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2807ee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[2807ee0]"></a>vsnprintf</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, kservice.o(i.vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2807b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2807f1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[28047cc]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2802954]"></a>_rt_thread_init</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[280251c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2802594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
<LI><a href="#[2807cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[15df620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[2802918]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[28025d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[280a5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2810928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>

<P><STRONG><a name="[28028dc]"></a>rt_thread_exit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[280440c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2805870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[280a640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280eee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[28caaa0]"></a>_rt_timer_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[28caa64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[280251c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[28caa64]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[15ded74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[28caaa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[28caa28]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[280a514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[28ca9ec]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[2802558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[28108ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[28c8afc]"></a>rt_serial_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i.rt_serial_close))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[28c8ac0]"></a>rt_serial_control</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_serial_control &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27ead04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[28c8a84]"></a>rt_serial_enable_dma</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, serial.o(i.rt_serial_enable_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = rt_serial_enable_dma &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2728c58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[28c8994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[28c8a48]"></a>rt_serial_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = rt_serial_init &rArr; rt_mp_init &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[27ead04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[2806a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_init
<LI><a href="#[2807cc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[28c8a0c]"></a>rt_serial_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, serial.o(i.rt_serial_open))
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[28c89d0]"></a>rt_serial_read</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_serial_read &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280ee70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[28c8994]"></a>rt_serial_write</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = rt_serial_write &rArr; rt_mp_alloc &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15deedc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[15df698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2806ba8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mp_alloc
<LI><a href="#[280a76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280ee70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[28c8a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_enable_dma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
